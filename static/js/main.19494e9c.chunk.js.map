{"version":3,"sources":["component/Square.jsx","component/Board.jsx","component/Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["Square","onClick","value","className","Board","square","createSquare","i","calcWinner","win","length","a","b","c","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","isXnext","setIsxNext","winner","status","moves","map","_","move","desc","jumpto","historyPoint","slice","current","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAYeA,EAVA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACzB,OACE,mCACE,wBAAQC,UAAU,SAASF,QAASA,EAApC,SACE,qCAAQC,UC2BDE,EA9BD,SAAC,GAAyB,IAAvBH,EAAsB,EAAtBA,QAASI,EAAa,EAAbA,OACpBC,EAAe,SAACC,GAClB,OAAO,cAAC,EAAD,CAAQL,MAAOG,EAAOE,GAAIN,QAAS,kBAAMA,EAAQM,OAE1D,OACE,mCACE,sBAAKJ,UAAU,cAAf,UACE,6CACA,sBAAKA,UAAU,QAAf,UACE,sBAAKA,UAAU,WAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKH,UAAU,WAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKH,UAAU,WAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,eCtBtBE,EAAa,SAACH,GAYhB,IAXA,IAAII,EAAM,CACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAF,EAAI,EAAGA,EAAIE,EAAIC,OAAQH,IAAK,CAAC,IAAD,cACnBE,EAAIF,GADe,GAC9BI,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAEnC,GAAIR,EAAOM,IAAMN,EAAOM,KAAON,EAAOO,IAAMP,EAAOO,KAAOP,EAAOQ,GAC/D,OAAOR,EAAOM,GAGlB,OAAO,MAwDMG,EArDF,WAAO,IAAD,EACWC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QADnC,mBACZC,EADY,KACHC,EADG,OAEiBJ,mBAAS,GAF1B,mBAEZK,EAFY,KAEAC,EAFA,OAGWN,oBAAS,GAHpB,mBAGZO,EAHY,KAGHC,EAHG,KAyBbC,EAAShB,EAAWU,EAAQE,IAC5BK,EAAS,GAEXA,EADED,EACO,mBAAqBA,EAErB,sBAAwBF,EAAU,IAAM,KAGnD,IAAII,EAAQR,EAAQS,KAAI,SAACC,EAAGC,GAC1B,IAAIC,EAAOD,EAAO,iBAAmBA,EAAO,mBAC5C,OACE,6BACE,wBAAQ5B,QAAS,kBAjBV,SAAC4B,GACZR,EAAcQ,GACdN,EAAWM,EAAO,IAAM,GAeGE,CAAOF,IAA9B,SAAsCC,KAD/BD,MAMb,OACE,qCACE,cAAC,EAAD,CAAOxB,OAAQa,EAAQE,GAAanB,QAvCtB,SAACM,GACjB,IAAIyB,EAAed,EAAQe,MAAM,EAAGb,EAAa,GAC7Cc,EAAUF,EAAaZ,GACvBf,EAAM,YAAO6B,GAEb1B,EAAW0B,IAAY7B,EAAOE,KAGlCF,EAAOE,GAAKe,EAAU,IAAM,IAE5BH,EAAW,GAAD,mBAAKa,GAAL,CAAmB3B,KAC7BgB,EAAcW,EAAatB,QAC3Ba,GAAYD,OA4BV,sBAAKnB,UAAU,OAAf,UACE,mCAAMsB,EAAN,OACA,mCAAMC,EAAN,cCjEOS,MAJf,WACE,OAAO,cAAC,EAAD,KCSMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.19494e9c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = ({ onClick, value }) => {\r\n  return (\r\n    <>\r\n      <button className=\"square\" onClick={onClick}>\r\n        <span> {value}</span>\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board = ({ onClick, square }) => {\r\n  let createSquare = (i) => {\r\n    return <Square value={square[i]} onClick={() => onClick(i)} />;\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"parentBoard\">\r\n        <h1>Tic Tac Toe</h1>\r\n        <div className=\"board\">\r\n          <div className=\"boardRow\">\r\n            {createSquare(0)}\r\n            {createSquare(1)}\r\n            {createSquare(2)}\r\n          </div>\r\n          <div className=\"boardRow\">\r\n            {createSquare(3)}\r\n            {createSquare(4)}\r\n            {createSquare(5)}\r\n          </div>\r\n          <div className=\"boardRow\">\r\n            {createSquare(6)}\r\n            {createSquare(7)}\r\n            {createSquare(8)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\n\r\nlet calcWinner = (square) => {\r\n  let win = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < win.length; i++) {\r\n    let [a, b, c] = win[i];\r\n    if (square[a] && square[a] === square[b] && square[b] === square[c]) {\r\n      return square[a];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nconst Game = () => {\r\n  let [history, setHistory] = useState([Array(9).fill(null)]);\r\n  let [stepNumber, setStepNumber] = useState(0);\r\n  let [isXnext, setIsxNext] = useState(true);\r\n\r\n  let handleClick = (i) => {\r\n    let historyPoint = history.slice(0, stepNumber + 1);\r\n    let current = historyPoint[stepNumber];\r\n    let square = [...current];\r\n\r\n    if (calcWinner(current) || square[i]) {\r\n      return;\r\n    }\r\n    square[i] = isXnext ? \"X\" : \"0\";\r\n\r\n    setHistory([...historyPoint, square]);\r\n    setStepNumber(historyPoint.length);\r\n    setIsxNext(!isXnext);\r\n  };\r\n\r\n  let jumpto = (move) => {\r\n    setStepNumber(move);\r\n    setIsxNext(move % 2 === 0);\r\n  };\r\n\r\n  let winner = calcWinner(history[stepNumber]);\r\n  let status = \"\";\r\n  if (winner) {\r\n    status = \"The winner is : \" + winner;\r\n  } else {\r\n    status = \" Next Player is : \" + (isXnext ? \"X\" : \"0\");\r\n  }\r\n\r\n  let moves = history.map((_, move) => {\r\n    let desc = move ? \"Go to Moeve > \" + move : \"Restart the Game\";\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpto(move)}>{desc}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Board square={history[stepNumber]} onClick={handleClick} />\r\n      <div className=\"info\">\r\n        <h2> {status} </h2>\r\n        <h3> {moves} </h3>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import \"./App.css\";\nimport Game from \"./component/Game\";\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}